activity <- activity %>% select(-group)
head(activity)
merge2 <- merge(merge1,activity,c("identifier"))
head(merge2)
#' merge with day length
merge3 <- merge(merge2,day_length,c("identifier"))
head(merge3)
#' merge with individual descriptions
animal <- read_csv("data/animalsensordata_mecoco.csv" , col_names = TRUE)
head(animal)
#' need a year column
animal$year <- format(as.Date(animal$gps_start_time, format="%Y/%m/%d"),"%Y")
head(animal)
#' select only relevant columns
animal <- animal %>% select(animals_id, sex, year_birth, year)
#' we need to append individual descriptions using aniamls_id
all_data <- merge(animal, merge3, by = "animals_id")
#' now calculate age
all_data$age <- all_data$year - all_data$year_birth
head(all_data)
all_data
#' now calculate age
all_data$age <- all_data$year - all_data$year_birth
class(all_data$year)
class(all_data$year_birth)
#' now calculate age
all_data$year_birth <- as.numeric(all_data$year_birth)
all_data$year <- as.numeric(all_data$year)
head(all_data)
all_data$age <- all_data$year - all_data$year_birth
head(all_data)
hist(all_data$age)
rm(ls=list())
rm(ls=list())
rm(ls=list())
rm(ls=list())
rm(list=ls())
#'##########################################################################
#' ame1 project - studying the relation between home range size and activity
#' 2019/11/04
#' Adam Kane, Enrico Pirotta & Barry McMahon
#' https://mecoco.github.io/ame1.html
#' merging data for week
############################################################################
library(tidyverse)
library(lubridate)
#' library(stringr)
#' load in HR data
hr <- read_csv("results/home_range_week.csv" , col_names = TRUE)
#' load in environmental data
env <- read_csv("results/env_data_week.csv" , col_names = TRUE)
#' load in the day length data
day_length <- read_csv("results/day_length_byWeek.csv" , col_names = TRUE)
head(day_length)
#' load in activity data
#' new 5 min interpolated activity data by week
activity <- read_csv("results/Activity_data_byWeek_5min.csv" , col_names = TRUE)
head(activity)
#' merge the first home range and environmental data
merge1 <- merge(hr,env,c("identifier")) %>% select(-id.x, -id.y, -week.y)
head(merge1)
#' merge with activity data
#' make an identifier so it matches the other output
activity$identifier <-  gsub('([[:punct:]])|\\s+','_',activity$group)
activity <- activity %>% select(-group)
head(activity)
merge2 <- merge(merge1,activity,c("identifier"))
head(merge2)
#' merge with day length
merge3 <- merge(merge2,day_length,c("identifier"))
head(merge3)
#' merge with individual descriptions
animal <- read_csv("data/animalsensordata_mecoco.csv" , col_names = TRUE)
head(animal)
#' need a year column
animal$year <- format(as.Date(animal$gps_start_time, format="%Y/%m/%d"),"%Y")
head(animal)
#' select only relevant columns
animal <- animal %>% select(animals_id, sex, year_birth, year)
#' we need to append individual descriptions using aniamls_id
all_data <- merge(animal, merge3, by = "animals_id")
#' now calculate age
all_data$year_birth <- as.numeric(all_data$year_birth)
all_data$year <- as.numeric(all_data$year)
head(all_data)
all_data$age <- all_data$year - all_data$year_birth
head(all_data)
#' add predator species counts
#' CH - Swiss Alps (Bernese, study areas id = 25) -> 2
#' IT - Italian Alps (Bondone, study areas id = 1) -> 2
#' FR - South France (Aurignac, study areas id = 8) -> 1
#' SE-DE - Southeast Germany (Bavarian Forest, study areas id = 2) -> 2
#' SW-DE - Southern Germany (Upper Rhine valley, study areas id = 15) -> 1
#' PL - Northeastern Poland (Bialowieza National Park, study areas id = 16) -> 3
all_data$predator <- ifelse(all_data$study_areas_id == 25 | all_data$study_areas_id == 1 | all_data$study_areas_id == 2, 2, 1)
all_data$predator <- ifelse(all_data$study_areas_id == 16, 3, all_data$predator)
head(all_data)
tail(all_data)
#' check that study area 16 has 3 predators
filter(all_data, study_areas_id == 16)
#' check that study area 25 has 2 predators
filter(all_data, study_areas_id == 25)
#' check that study area 8 has 1 predator
filter(all_data, study_areas_id == 8)
names(all_data)
#' new name is first
all_data <- all_data %>% rename(week = week.x, mean_day_length = Mean)
#' export the results
write.csv(all_data, "results/combined_data.csv", row.names = F)
8157 - 7987
animal
rm(list=ls())
#'##########################################################################
#' ame1 project - studying the relation between home range size and activity
#' 2019/11/04
#' Adam Kane, Enrico Pirotta & Barry McMahon
#' https://mecoco.github.io/ame1.html
#' merging data for week
############################################################################
library(tidyverse)
library(lubridate)
#' library(stringr)
#' load in HR data
hr <- read_csv("results/home_range_week.csv" , col_names = TRUE)
#' load in environmental data
env <- read_csv("results/env_data_week.csv" , col_names = TRUE)
#' load in the day length data
day_length <- read_csv("results/day_length_byWeek.csv" , col_names = TRUE)
head(day_length)
#' load in activity data
#' new 5 min interpolated activity data by week
activity <- read_csv("results/Activity_data_byWeek_5min.csv" , col_names = TRUE)
head(activity)
#' merge the first home range and environmental data
merge1 <- merge(hr,env,c("identifier")) %>% select(-id.x, -id.y, -week.y)
head(merge1)
#' merge with activity data
#' make an identifier so it matches the other output
activity$identifier <-  gsub('([[:punct:]])|\\s+','_',activity$group)
activity <- activity %>% select(-group)
head(activity)
merge2 <- merge(merge1,activity,c("identifier"))
head(merge2)
#' merge with day length
merge3 <- merge(merge2,day_length,c("identifier"))
head(merge3)
#' merge with individual descriptions
animal <- read_csv("data/animalsensordata_mecoco.csv" , col_names = TRUE)
head(animal)
#' need a year column
animal$year <- format(as.Date(animal$gps_start_time, format="%Y/%m/%d"),"%Y")
head(animal)
#' select only relevant columns
animal <- animal %>% select(animals_id, sex, year_birth, year)
#' we need to append individual descriptions using aniamls_id
all_data <- merge(animal, merge3, by = "animals_id")
#' now calculate age
all_data$year_birth <- as.numeric(all_data$year_birth)
all_data$year <- as.numeric(all_data$year)
head(all_data)
all_data$age <- all_data$year - all_data$year_birth
head(all_data)
#' add predator species counts
#' CH - Swiss Alps (Bernese, study areas id = 25) -> 2
#' IT - Italian Alps (Bondone, study areas id = 1) -> 2
#' FR - South France (Aurignac, study areas id = 8) -> 1
#' SE-DE - Southeast Germany (Bavarian Forest, study areas id = 2) -> 2
#' SW-DE - Southern Germany (Upper Rhine valley, study areas id = 15) -> 1
#' PL - Northeastern Poland (Bialowieza National Park, study areas id = 16) -> 3
all_data$predator <- ifelse(all_data$study_areas_id == 25 | all_data$study_areas_id == 1 | all_data$study_areas_id == 2, 2, 1)
all_data$predator <- ifelse(all_data$study_areas_id == 16, 3, all_data$predator)
head(all_data)
tail(all_data)
#' check that study area 16 has 3 predators
filter(all_data, study_areas_id == 16)
#' check that study area 25 has 2 predators
filter(all_data, study_areas_id == 25)
#' check that study area 8 has 1 predator
filter(all_data, study_areas_id == 8)
names(all_data)
#' new name is first
all_data <- all_data %>% rename(week = week.x, mean_day_length = Mean)
#' export the results
write.csv(all_data, "results/combined_data_week.csv", row.names = F)
#Packages----
library(car)
library(mgcv)
library(effects)
library(lme4)
library(MuMIn)
library(tidyverse)
library(lattice)
install.packages("MuMIn")
library(MuMIn)
#Load data----
dat <- read.csv("data/combined_data_week.csv", header=T)
#Load data----
dat <- read.csv("results/combined_data_week.csv", header=T)
head(dat)
str(dat)
names(dat)
#EDA----
plot(dat$mcp, dat$kdearea)
cor(dat$mcp, dat$kdearea) #strong correlation between the two measures of HR; probably OK to just focus on one
#dat3 <- dat[dat$kdearea<10, ] #exclude outliers (TMP)
dat3 <- dat #keep outliers (Adam has checked them, they are legit)
plot(dat3$mcp, dat3$kdearea)
#Collinearity
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
names(dat3)
png("results/Correlation_week.png", width=10000, height=10000, units="px")
png("results/Correlation_week.png", width=10000, height=10000, units="px")
#Packages----
library(car)
library(mgcv)
library(lme4)
library(effects)
library(lattice)
library(MuMIn)
library(tidyverse)
library(lubridate)
#Load data----
dat <- read.csv("results/combined_data_week.csv", header=T)
head(dat)
str(dat)
names(dat)
cor(dat$mcp, dat$kdearea) #strong correlation between the two measures of HR; probably OK to just focus on one
#EDA----
plot(dat$mcp, dat$kdearea)
#Collinearity
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
names(dat3)
#Packages----
library(car)
library(mgcv)
library(lme4)
library(effects)
library(lattice)
library(MuMIn)
library(tidyverse)
library(lubridate)
#Load data----
dat <- read.csv("results/combined_data_week.csv", header=T)
head(dat)
str(dat)
names(dat)
#EDA----
plot(dat$mcp, dat$kdearea)
cor(dat$mcp, dat$kdearea) #strong correlation between the two measures of HR; probably OK to just focus on one
#dat3 <- dat[dat$kdearea<10, ] #exclude outliers (TMP)
dat3 <- dat #keep outliers (Adam has checked them, they are legit)
plot(dat3$mcp, dat3$kdearea)
#Collinearity
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
names(dat3)
png("results/Correlation_week.png", width=10000, height=10000, units="px")
pairs(dat3[,c(9:36,38,39,4)], lower.panel = panel.smooth, upper.panel = panel.cor,
gap=0, row1attop=FALSE)
dev.off()
dat4 <- dat3
#treat factors as such
dat4$sex <- as.factor(dat4$sex)
dat4$sensor_type <- as.factor(dat4$sensor_type)
dat4$study_areas_id <- as.factor(dat4$study_areas_id)
dat4$animals_id <- as.factor(dat4$animals_id)
#standardise covariates
names(dat4)
dat4[,30]
head(dat4[,30])
names(dat4[,30])
#model with interaction
fit1_2 <- lmer(log_kde ~ mean_act * sensor_type + sex + age + ndvi_Mean + slope_Mean + tree_Mean + predator + mean_day_length + (1|study_areas_id/animals_id), data=dat4, REML=F, na.action=na.fail)
#transform response
hist(dat4$kdearea,breaks=100)
hist(log(dat4$kdearea),breaks=100)
dat4$log_kde <- log(dat4$kdearea)
#GLMM----
fit1 <- lmer(log_kde ~ mean_act + sensor_type + sex + age + ndvi_Mean + slope_Mean + tree_Mean  + mean_day_length + (1|study_areas_id/animals_id), data=dat4, REML=F, na.action=na.fail)
#model with interaction
fit1_2 <- lmer(log_kde ~ mean_act * sensor_type + sex + age + ndvi_Mean + slope_Mean + tree_Mean + predator + mean_day_length + (1|study_areas_id/animals_id), data=dat4, REML=F, na.action=na.fail)
plot(effect("mean_act:sensor_type", fit1_2))
#Packages----
library(car)
library(mgcv)
library(lme4)
library(effects)
install.packages("effects")
fit2_2 <- gam(log_kde ~ mean_act*sensor_type + sex + age + s(ndvi_Mean, bs="ts") + s(slope_Mean, bs="ts") + s(tree_Mean, bs="ts") + predator + s(mean_day_length, bs="ts")+ s(animals_id, bs="re"), data=dat4, na.action=na.fail, method="ML")
plot(effect("mean_act:sensor_type", fit1_2))
library(effects)
plot(effect("mean_act:sensor_type", fit1_2))
summary(fit1_2)
AIC(fit1, fit1_2)
fit2_2 <- gam(log_kde ~ mean_act*sensor_type + sex + age + s(ndvi_Mean, bs="ts") + s(slope_Mean, bs="ts") + s(tree_Mean, bs="ts") + predator + s(mean_day_length, bs="ts")+ s(animals_id, bs="re"), data=dat4, na.action=na.fail, method="ML")
plot(fit2_2, all.terms=T, scale=0)
summary(fit2_2)
library(broom)
tidy(fit1_2)
tidy(fit2_2)
gam.check(fit2_2)
summary(fit2_2)
summary(fit1_2)
summary(fit2_2)
plot(fit2_2, all.terms=T, scale=0)
plot(fit2_2, all.terms=T, scale=0)
#Packages----
library(car)
library(mgcv)
library(lme4)
library(effects)
library(lattice)
library(MuMIn)
library(tidyverse)
library(lubridate)
#Load data----
dat <- read.csv("results/combined_data_week.csv", header=T)
head(dat)
str(dat)
names(dat)
#EDA----
plot(dat$mcp, dat$kdearea)
cor(dat$mcp, dat$kdearea) #strong correlation between the two measures of HR; probably OK to just focus on one
#dat3 <- dat[dat$kdearea<10, ] #exclude outliers (TMP)
dat3 <- dat #keep outliers (Adam has checked them, they are legit)
plot(dat3$mcp, dat3$kdearea)
dat4 <- dat3
#treat factors as such
dat4$sex <- as.factor(dat4$sex)
dat4$sensor_type <- as.factor(dat4$sensor_type)
dat4$study_areas_id <- as.factor(dat4$study_areas_id)
dat4$animals_id <- as.factor(dat4$animals_id)
#standardise covariates
names(dat4)
for (i in c(30, 39, 9, 11, 13, 38, 40)){ #select columns used below
dat4[,i] <- (dat4[,i] - mean(dat4[,i]))/sd(dat4[,i])
}
#transform response
hist(dat4$kdearea,breaks=100)
hist(log(dat4$kdearea),breaks=100)
dat4$log_kde <- log(dat4$kdearea)
#GLMM----
fit1 <- lmer(log_kde ~ mean_act + sensor_type + sex + age + ndvi_Mean + slope_Mean + tree_Mean  + mean_day_length + (1|study_areas_id/animals_id), data=dat4, REML=F, na.action=na.fail)
fit2_2 <- gam(log_kde ~ mean_act*sensor_type + sex + age + s(ndvi_Mean, bs="ts") + s(slope_Mean, bs="ts") + s(tree_Mean, bs="ts") + predator + s(mean_day_length, bs="ts")+ s(animals_id, bs="re"), data=dat4, na.action=na.fail, method="ML")
gam.check(fit2_2)
?gam.check
gam.check(fit2_2)
summary(fit2_2)
gam.check(fit2_2)
#' Overlap with Protected Areas
# load packages
library(wdpar)
library(countrycode)
library(sf)
library(dplyr)
# load country data
country_data <- countrycode::codelist_panel
# find names of all countries in Africa (ISO3 format)
cn <-
country_data %>%
filter(continent == "Africa") %>%
`[[`("iso3c") %>%
unique() %>%
sort()
# download raw protected area data
raw_data <- lapply(cn, wdpa_fetch)
install.packages("wdpar", repos = "https://cran.rstudio.com/")
install.packages("wdpar", repos = "https://cran.rstudio.com/")
#' Overlap with Protected Areas
# load packages
library(wdpar)
library(countrycode)
library(sf)
library(dplyr)
# download raw protected area data
raw_data <- lapply(cn, wdpa_fetch)
# download global data
global_raw_data <- wdpa_fetch("global", wait = TRUE, download_dir = "C:\\Users\\Adam Kane\\Documents\\Methods\\GIS\\Shapefiles")
# subset data to include only Liechtenstein
lie_raw_data2 <- global_raw_data %>% filter(ISO == "LIE")
# subset data to include only Liechtenstein
lie_raw_data2 <- global_raw_data %>% filter(ISO3 == "LIE")
# plot data
plot(lie_raw_data2)
#' clean the data
lie_clean_data2 <- wdpa_clean(lie_raw_data2)
# plot data
plot(lie_clean_data2)
rlang::last_error()
pts <- st_sample(lie_raw_data2, size = 750)
lengths(st_intersects(lie_raw_data2, pts)))
lengths(st_intersects(lie_raw_data2, pts))
plot(poly[1, 1], reset = FALSE, col = "grey")
plot(lie_raw_data2[1, 1], reset = FALSE, col = "grey")
plot(pts, add = TRUE)
lie_raw_data2[1, 1]
lie_raw_data2[2, 1]
plot(lie_raw_data2[2, 1], reset = FALSE, col = "red")
plot(pts, add = TRUE)
#' third area
plot(lie_raw_data2[3, 1], reset = FALSE, col = "white")
plot(pts, add = TRUE)
#' fourth area
plot(lie_raw_data2[4, 1], reset = FALSE, col = "blue")
plot(pts, add = TRUE)
#' 40th area
plot(lie_raw_data2[40, 1], reset = FALSE, col = "cyan")
plot(pts, add = TRUE)
lie_raw_data2[40, 1]
pts <- st_sample(lie_raw_data2, size = 750)
lengths(st_intersects(lie_raw_data2, pts))
pts <- st_sample(lie_raw_data2, size = 750)
lengths(st_intersects(lie_raw_data2, pts))
pts <- st_sample(lie_raw_data2, size = 750)
lengths(st_intersects(lie_raw_data2, pts))
#' first area
plot(lie_raw_data2[1, 1], reset = FALSE, col = "grey")
plot(pts, add = TRUE)
#' second area
plot(lie_raw_data2[2, 1], reset = FALSE, col = "red")
#' third area
plot(lie_raw_data2[3, 1], reset = FALSE, col = "white")
plot(pts, add = TRUE)
#' fourth area
plot(lie_raw_data2[4, 1], reset = FALSE, col = "blue")
plot(pts, add = TRUE)
#' 40th area
plot(lie_raw_data2[40, 1], reset = FALSE, col = "cyan")
plot(pts, add = TRUE)
plot(pts, add = TRUE)
mydata <- read.csv("C:\\Users\\Adam Kane\\Documents\\Manuscripts\\vulture_habitat\\regularised.csv", header = T, sep = ",")
mydata <- read.csv("C:\\Users\\Adam Kane\\Documents\\Manuscripts\\vulture_habitat\\regularised\\swazi_reg.csv", header = T, sep = ",")
head(mydata)
# subset data to include only Eswatini
swz_raw_data <- global_raw_data %>% filter(ISO3 == "SWZ")
plot(swz_raw_data)
class(swz_raw_data)
swz_raw_data
#' first area
plot(swz_raw_data[1, 1], reset = FALSE, col = "grey")
#' first area
plot(swz_raw_data[1, 2], reset = FALSE, col = "grey")
#' first area
plot(swz_raw_data[1, 4], reset = FALSE, col = "grey")
1
#' first area
plot(swz_raw_data[1, 1], reset = FALSE, col = "grey")
#' first area - Hlane
plot(swz_raw_data[1, 4], reset = FALSE, col = "grey")
#' first area - Hlane
plot(swz_raw_data[4, 1], reset = FALSE, col = "grey")
#' test overlap with dummy points
p1 = st_point(c(7,-26.28))
p2 = st_point(c(-30,31.86))
sfc = st_sfc(p1, p2, crs = 4326)
plot(sfc, add = TRUE)
#' test overlap with dummy points
p1 = st_point(c(7,31.86))
p2 = st_point(c(-30,-26.28))
sfc = st_sfc(p1, p2, crs = 4326)
plot(sfc, add = TRUE)
plot(swz_raw_data[4, 1], reset = FALSE, col = "grey")
plot(sfc, add = TRUE)
sfc
#' test overlap with dummy points
(sites <-
data.frame(
longitude = c(31.8800,31.8801),
latitude = c(-26.2500, -26.2522)
))
(sites <- st_as_sf(
sites,
coords = c("longitude", "latitude"),
crs = 4326,
agr = "constant"
))
ggplot(data = swz_raw_data[4, 1]) +
geom_sf() +
geom_sf(data = sites, size = 4, shape = 23, fill = "darkred")
library(ggplot2)
ggplot(data = swz_raw_data[4, 1]) +
geom_sf() +
geom_sf(data = sites, size = 4, shape = 23, fill = "darkred")
#' first area - Hlane
plot(swz_raw_data[4, 1], reset = FALSE, col = "grey")
plot(sites, add = TRUE)
