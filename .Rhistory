mydata <- rename(mydata, lat = latitude)
mydata <- rename(mydata, id = animals_id)
mydata <- rename(mydata, study = study_areas_id)
mydata
#' look at the IDs
levels(factor(mydata$id))
# can look at an individual level with
(filter(mydata, id == "768"))
#' all of the data is in the format of day-month-year
#' note that time is in UTC
mydata$New_time <-
parse_date_time(x = mydata$time, c("%Y-%m-%d %H:%M:%S"))
# keep only the new time data
mydata <- select(mydata, New_time, long, lat, id, study)
mydata <- rename(mydata, time = New_time)
mydata
#' filter extreme data based on a speed threshold
#' based on vmax which is km/hr
#' time needs to be labelled DateTime for these functions to work
#' not necessary as nothing exceeds this value
#' names(mydata)[names(mydata) == 'time'] <- 'DateTime'
#' SDLfilterData <-
#'  ddfilter.speed(data.frame(mydata), vmax = 70, method = 1)
#' length(SDLfilterData$DateTime)
#' rename everything as before
#' mydata <- SDLfilterData
#' names(mydata)[names(mydata) == 'DateTime'] <- 'time'
# check the minimum time and the maximum time
min_time <- mydata %>% group_by(id) %>% slice(which.min(time))
data.frame(min_time)
max_time <- mydata %>% group_by(id) %>% slice(which.max(time))
data.frame(max_time)
#' determine the length of time each deer was tracked for
duration <-
difftime(max_time$time, min_time$time, units = "days")
duration
#' try the amt package
trk <-
mk_track(
mydata,
.x = long,
.y = lat,
.t = time,
id = id,
crs = CRS("+init=epsg:4326")
)  %>%
transform_coords(
sp::CRS(
"+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs"
)  # Lambert Azimuthal Equal Area
)
#' summarise the sampling rate
data_summary <-
trk %>% nest(-id) %>% mutate(sr = map(data, summarize_sampling_rate)) %>%
dplyr::select(id, sr) %>% unnest %>% arrange(id)
data_summary
#' measure the time difference between points for each bird ID using dplyr
#' - Group your data by ID
#' - Compute time diffs between each timestamp in your group (the 1st time diff is NA)
#' - Create a new ID that counts no. of prior time gaps that are large (e.g. > 24 hours)
#' - Split the ID into newID by using an underscore separator
length(levels(as.factor(trk$id)))
trk2 <- trk %>%
group_by(id) %>%
mutate(timeDiff = c(NA, difftime(tail(t_,-1), head(t_,-1), units = "hours"))) %>%
mutate(newID = paste(id, cumsum(!is.na(timeDiff) &
timeDiff > 24), sep = "_")) %>%
ungroup()
head(trk2)
#' check the number of newIDs
levels(as.factor(trk2$newID))
length(levels(as.factor(trk2$newID)))
#' how long are the tracks now that some of them have been split
sapply(split(trk2$x_, trk2$newID), length)
#' create a trajectory object using adehabitatLT
trk_ltraj <-
as.ltraj(xy = trk2[, c("x_", "y_")],
date = trk2$t_,
id = trk2$newID)
#' rediscretization of the trajectory
tstep <-
14400 # time step we want for the rediscretization, in seconds, 14400 secs = 4 hours
newtr <- redisltraj(trk_ltraj, u = tstep, type = "time")
head(newtr[1])
head(newtr[2])
class(newtr)
#' convert to class data frame
trk3 <- ld(newtr)
head(trk3)
class(trk3$date)
#' we should group the IDs that were split if they had big gaps back together into their original ID structure
#' this involves accessing the name of the new ID that occurs before the underscore
trk3 <- separate(trk3,
col = id,
sep = "_",
into = c("ID", "NA"))
head(trk3)
levels(as.factor(trk3$ID))
length(levels(as.factor(trk3$ID)))
#' remove the resultant NA column that occurs after the split
trk3 <- select(trk3, x, y, date, ID)
head(trk3)
#' turn it back into a trk
trk4 <-
mk_track(
trk3,
.x = x,
.y = y,
.t = date,
id = ID,
crs = CRS(
"+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs"
)
)
#' we need to extract weekly home ranges, some animals were tracked for over a year
#' so we must include a year-week-id grouping variable
#' first combine year and month
trk4$yr_week <- format(trk4$t_, format = "%Y/%w")
trk4$yr_week <- as.factor(trk4$yr_week)
#' we also need a year-month-day variable to see what the coverage is like over the course of
#' a month for each individual
trk4$yr_week_day <- format(trk4$t_, format = "%Y/%w/%d")
trk4$yr_week_day <- as.factor(trk4$yr_week_day)
head(trk4)
#' count the number of unique days when grouped by id and and week
short_weeks <- trk4 %>%
group_by(id, yr_week) %>%
summarise(count = n_distinct(yr_week_day)) %>% filter(count < 5) %>% droplevels()
short_weeks
short_weeks$yr_week
#' we merge the two and force all = TRUE so even the values that don't have a count
#' are included, this allows us to extract the tracks that have ~ a week
#' of coverage
test <- merge(short_weeks, trk4, all = TRUE)
length(test$id)
length(trk4$id)
#' keep only the rows with the NAs which are the counts > 5 i.e. data with ~ a week
#' of coverage
trk5<- test %>% filter_all(any_vars(is.na(.)))
#' now create a unique identifier that has the ID, year and week
#' We will use these to build home ranges
trk5$identifier <- paste(trk5$id, trk5$yr_week, sep = "_")
trk5$identifier <- as.factor(trk5$identifier)
head(trk5)
#' turn it back into a trk
trk5 <-
mk_track(
trk5,
.x = x_,
.y = y_,
.t = t_,
id = id,
identifier = identifier,
crs = CRS(
"+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs"
)
)
#' run some summary stats on the data to make sure everything looks okay
length(levels(as.factor(trk5$id)))
length(levels(as.factor(trk5$id)))
sapply(split(trk5$x_, trk5$identifier), length)
short_weeks
short_weeks$yr_week
head(trk5)
24/6
4*7
#' run some summary stats on the data to make sure everything looks okay
length(levels(as.factor(trk5$id)))
length(levels(as.factor(trk5$id)))
sapply(split(trk5$x_, trk5$identifier), length)
filter(trk5, identifier = 769_2005/5)
filter(trk5, identifier = "769_2005/5")
filter(trk5, identifier == "769_2005/5")
#' we need to extract weekly home ranges, some animals were tracked for over a year
#' so we must include a year-week-id grouping variable
#' first combine year and week
trk4$yr <- format(trk4$t_, format = "%Y")
trk4$yr <- as.factor(trk4$yr)
#' turn it back into a trk
trk4 <-
mk_track(
trk3,
.x = x,
.y = y,
.t = date,
id = ID,
crs = CRS(
"+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs"
)
)
#' we need to extract weekly home ranges, some animals were tracked for over a year
#' so we must include a year-week-id grouping variable
#' first combine year and week
trk4$yr <- format(trk4$t_, format = "%Y")
trk4$yr <- as.factor(trk4$yr)
trk4
class(trk4$t_)
trk4$week <- week(trk4$t_)
trk4$week <- week(trk4$t_)
trk4$week <- as.factor(trk4$week)
trk4
trk4
trk4$yr_week <- paste(trk4$yr,trk4$week, sep = "_")
trk4
#' we also need a year-week-day variable to see what the coverage is like over the course of
#' a week for each individual
trk4$yr_week_day <- format(trk4$t_, format = "%Y/%w/%d")
trk4$yr_week_day <- as.factor(trk4$yr_week_day)
head(trk4)
#' count the number of unique days when grouped by id and and week
short_weeks <- trk4 %>%
group_by(id, yr_week) %>%
summarise(count = n_distinct(yr_week_day)) %>% filter(count < 5) %>% droplevels()
short_weeks
short_weeks$yr_week
filter(trk4, id == "1402" & yr_week == "2012_53")
short_weeks
short_weeks$yr_week
filter(trk4, id == "1402" & yr_week == "2010_53")
filter(trk4, id == "1402" & yr_week == "2012_53")
?format
?as.POSIXct()
#' we also need a year-week-day variable to see what the coverage is like over the course of
#' a week for each individual
trk4$day <- day(trk4$t_)
trk4$day <- as.factor(trk4$day)
trk4
trk4$yr_week_day <- paste(trk4$yr_week, trk4$day, sep = "_")
#' count the number of unique days when grouped by id and and week
short_weeks <- trk4 %>%
group_by(id, yr_week) %>%
summarise(count = n_distinct(yr_week_day)) %>% filter(count < 5) %>% droplevels()
short_weeks
short_weeks$yr_week
#' take a look at one track that didn't meet the cutoff and has only two days of coverage
#' for week 8 in 2013
filter(trk4, id == "1402" & yr_week == "2013_8")
#' we merge the two and force all = TRUE so even the values that don't have a count
#' are included, this allows us to extract the tracks that have ~ a week
#' of coverage
test <- merge(short_weeks, trk4, all = TRUE)
length(test$id)
length(trk4$id)
#' keep only the rows with the NAs which are the counts > 5 i.e. data with ~ a week
#' of coverage
trk5<- test %>% filter_all(any_vars(is.na(.)))
#' now create a unique identifier that has the ID, year and week
#' We will use these to build home ranges
trk5$identifier <- paste(trk5$id, trk5$yr_week, sep = "_")
trk5$identifier <- as.factor(trk5$identifier)
head(trk5)
#' turn it back into a trk
trk5 <-
mk_track(
trk5,
.x = x_,
.y = y_,
.t = t_,
id = id,
identifier = identifier,
crs = CRS(
"+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs"
)
)
#' run some summary stats on the data to make sure everything looks okay
length(levels(as.factor(trk5$id)))
length(levels(as.factor(trk5$id)))
sapply(split(trk5$x_, trk5$identifier), length)
24/4
7*7
7*6
#' Calculate home range size
#' first for MCP
mcps <- trk5 %>% group_by(identifier) %>%  nest(-identifier) %>%
mutate(mcparea = map(data, ~ hr_mcp(., levels = c(0.95)) %>% hr_area)) %>%
select(identifier, mcparea) %>% unnest()
mcps$area <- mcps$area / 1000000
mcp_95 <- mcps %>% arrange(identifier)
mcp_95
#' Same for KDE 95
kde <- trk5 %>% group_by(identifier) %>% nest(-identifier) %>%
mutate(kdearea = map(data, ~ hr_kde(., level = c(0.95)) %>% hr_area)) %>%
select(identifier, kdearea) %>% unnest()
kde$kdearea <-  kde$kdearea / 1000000
kde_95 <- kde %>% arrange(identifier)
kde_95
#' combine the data
kde_95$mcp <- mcp_95$area
#' rename
home_range_week <- kde_95
head(home_range_week)
trk5
#' stick on the month for future analysis
trk5$month <- month(trk5$t_)
trk5
#' Calculate home range size
#' first for MCP
mcps <- trk5 %>% group_by(identifier) %>%  nest(-identifier) %>%
mutate(mcparea = map(data, ~ hr_mcp(., levels = c(0.95)) %>% hr_area)) %>%
select(identifier, mcparea) %>% unnest()
mcps$area <- mcps$area / 1000000
mcp_95 <- mcps %>% arrange(identifier)
mcp_95
#' Same for KDE 95
kde <- trk5 %>% group_by(identifier) %>% nest(-identifier) %>%
mutate(kdearea = map(data, ~ hr_kde(., level = c(0.95)) %>% hr_area)) %>%
select(identifier, kdearea) %>% unnest()
kde$kdearea <-  kde$kdearea / 1000000
kde_95 <- kde %>% arrange(identifier)
kde_95
#' combine the data
kde_95$mcp <- mcp_95$area
#' rename
home_range_week <- kde_95
head(home_range_week)
tail(home_range_week)
?separate
home_range_week <-
separate(
home_range_week,
col = identifier,
into = c("id", "NA"),
sep = "_",
remove = "FALSE",
extra = "merge"
) %>%  select(-"NA")
home_range_week
#' add an id column and a week column
home_range_week <-
separate(
home_range_week,
col = identifier,
into = c("id", "NA", "week"),
sep = "_",
remove = "FALSE",
extra = "merge"
) %>%  select(-"NA")
home_range_week
#' add an id column and a week column
home_range_week <-
separate(
home_range_week,
col = identifier,
into = c("id", "NA"),
sep = "_",
remove = "FALSE",
extra = "merge"
) %>%  select(-"NA")
#' export the results
write.csv(home_range_week, "results/home_range_week.csv", row.names = F)
#' add an id column and a week column
home_range_week <-
separate(
home_range_week,
col = identifier,
into = c("id", "NA", "week"),
sep = "_",
remove = "FALSE",
extra = "merge"
) %>%  select(-"NA")
home_range_week
#' export the results
write.csv(home_range_week, "results/home_range_week.csv", row.names = F)
library(adehabitatLT)
library(lubridate)
library(amt)
library(sp)
rm(ind2)
#' rename some of the columns for data manipulation
#' order is new name old name
mydata <- rename(mydata, time = acquisition_time)
mydata <- rename(mydata, long = longitude)
mydata <- rename(mydata, lat = latitude)
mydata <- rename(mydata, study = study_areas_id)
mydata <- rename(mydata, id = animals_id)
head(mydata)
#'##########################################################################
#' ame1 project - studying the relation between home range size and activity
#' 2019/10/04
#' Adam Kane, Enrico Pirotta & Barry McMahon
#' https://mecoco.github.io/ame1.html
#' loading and cleaning the GPS data
############################################################################
#' Load the required packages
library(tidyverse)
#' Section 1: Load the data ----
mydata <- read_csv("data/gpsdata_mecoco.csv" , col_names = TRUE)
#' take a look at what we've loaded
glimpse(mydata)
head(mydata)
tail(mydata)
summary(mydata)
str(mydata)
levels(as.factor(mydata$animals_id))
#' 1,892,424 observations of 15 variables
#' looks like there are some NAs in the data
#' let's drop them
mydata <- mydata %>% drop_na()
#' reduces the data set down to 1,788,743 observations
#' how many data points are in each of the studies?
mydata %>% group_by(study_areas_id) %>% summarise(duration = length(study_areas_id))
library(adehabitatLT)
library(lubridate)
library(amt)
library(sp)
#' rename some of the columns for data manipulation
#' order is new name old name
mydata <- rename(mydata, time = acquisition_time)
mydata <- rename(mydata, long = longitude)
mydata <- rename(mydata, lat = latitude)
mydata <- rename(mydata, id = animals_id)
mydata <- rename(mydata, study = study_areas_id)
mydata <- rename(mydata, ndvi = ndvi_modis_boku)
mydata <- rename(mydata, altitude = altitude_copernicus)
mydata <- rename(mydata, slope = slope_copernicus)
mydata <- rename(mydata, aspect = aspect_copernicus)
mydata <- rename(mydata, tree = treecover_copernicus)
#' all of the data is in the format of day-month-year
#' note that time is in UTC
mydata$New_time <-
parse_date_time(x = mydata$time, c("%Y-%m-%d %H:%M:%S"))
# keep only the new time data
mydata <- select(mydata, New_time, long, lat, id, study, ndvi, altitude, slope, aspect, tree, corine_2006, corine_2012)
mydata <- rename(mydata, time = New_time)
mydata
#' we want to work with weekly averages
#' some animals were tracked for over a year
#' so we must include a year-month-id grouping variable
#' first combine year and month
mydata$yr_month <- format(mydata$time, format = "%Y/%m")
mydata$yr_month  <- as.factor(mydata$yr_month)
mydata$yr <- format(mydata$time, format = "%Y")
mydata$yr <- as.factor(mydata$yr)
mydata$week <- week(mydata$time)
mydata$week <- as.factor(mydata$week)
mydata$yr_week <- paste(mydata$yr,mydata$week, sep = "_")
mydata
#' we also need a year-week-day variable to see what the coverage is like over the course of
#' a week for each individual
mydata$day <- day(mydata$time)
mydata$day <- as.factor(mydata$day)
mydata$yr_week_day <- paste(mydata$yr_week, mydata$day, sep = "_")
#' count the number of unique days when grouped by id and and year
short_months <- mydata %>%
group_by(id, yr_week) %>%
summarise(count = n_distinct(yr_week_day)) %>% filter(count < 5) %>% droplevels()
short_months
#' count the number of unique days when grouped by id and and year
short_weeks <- mydata %>%
group_by(id, yr_week) %>%
summarise(count = n_distinct(yr_week_day)) %>% filter(count < 5) %>% droplevels()
short_weeks
short_weeks$yr_week
#' we merge the two and force all = TRUE so even the values that don't have a count
#' are included, this allows us to extract the tracks that have ~ a month
#' of coverage
mydata2 <- merge(short_weeks, mydata, all = TRUE)
length(mydata$id)
length(mydata2$id)
#' keep only the rows with the NAs which are the counts > 5 i.e. data with ~ a week
#' of coverage
mydata2<- mydata2 %>% filter_all(any_vars(is.na(.)))
head(mydata2)
#' Corine data switches in 2012, so they're not the same value
#' mydata2$corine_2006 == mydata2$corine_2012
#' We can create a new column with year and provide Corine conditional on the year
mydata2$year <- format(mydata2$time, format = "%Y")
mydata2$year <- as.numeric(mydata2$year)
head(mydata2)
mydata2$corine <- if_else(mydata2$year >= 2012, mydata2$corine_2012, mydata2$corine_2006)
#' check that it worked
mydata2 %>% filter(id == 1453)
#' now create a unique identifier that has the ID, year and month
#' We will use these to summarise the covariates
mydata2$identifier <- paste(mydata2$id, mydata2$yr_week, sep = "_")
mydata2$identifier <- as.factor(mydata2$identifier)
head(mydata2)
#' Create the function for mode
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
#' calculate summary statistics for each covariate
summary_data <- mydata2 %>% group_by(identifier) %>%
summarise_at(.vars = vars(ndvi, altitude, slope, aspect, tree, corine),
.funs = c(Mean="mean", Sd="sd", Median = "median", Mode = "getmode"))
#' remove the summary statistics for corine that don't make sense i.e. everything bar the mode
summary_data <- summary_data %>% select(-corine_Mean, -corine_Sd, -corine_Median)
summary_data
#' add an id column
summary_data <-
separate(
summary_data,
col = identifier,
into = c("id", "NA","week"),
sep = "_",
remove = "FALSE"
) %>%  select(-"NA")
summary_data
#' export the results
write.csv(summary_data, "results/env_data_week.csv", row.names = F)
#' load in HR data
hr <- read_csv("results/home_range_week.csv" , col_names = TRUE)
#' load in environmental data
env <- read_csv("results/env_data_week.csv" , col_names = TRUE)
#' merge the first 2
merge1 <- merge(hr,env,c("identifier")) %>% select(-id.x, -id.y)
head(merge1)
#' new 5 min interpolated activity data
activity <- read_csv("results/Activity_data_byMonth_5min.csv" , col_names = TRUE)
head(activity)
head(merge1)
